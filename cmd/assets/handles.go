package assets

import (
	"log/slog"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/adm87/deepdown/scripts/assets"
	"github.com/adm87/deepdown/scripts/deepdown"
	"github.com/spf13/cobra"
)

const handlesGoTemplate = `// Code generated by "deepdown generate-asset-handles". DO NOT EDIT.
package data

import "github.com/adm87/deepdown/scripts/assets"

// This file registers all asset paths to their respective handles.

const (
{{- range $name, $path := .Paths }}
	{{ $name }} = assets.AssetHandle("{{ $path }}")
{{- end }}
)
`

var paths = make(map[string]string)

func GenerateHandles(ctx deepdown.Context) *cobra.Command {
	var (
		input  string
		output string
	)

	cmd := &cobra.Command{
		Use:   "generate-asset-handles",
		Short: "Generate asset handles",
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx.Logger().Info("Generating asset handles...")

			output, err := filepath.Abs(output)
			if err != nil {
				ctx.Logger().Error("error", slog.Any("err", err))
				return err
			}
			input, err := filepath.Abs(input)
			if err != nil {
				ctx.Logger().Error("error", slog.Any("err", err))
				return err
			}

			if err := generateHandles(input, output); err != nil {
				ctx.Logger().Error("error", slog.Any("err", err))
				return err
			}

			ctx.Logger().Info("Asset handles generated successfully", slog.String("output", output))
			return nil
		},
	}

	cmd.Flags().StringVarP(&input, "input", "i", "assets", "Input directory to scan for assets")
	cmd.Flags().StringVarP(&output, "output", "o", "data/handles.go", "Output file for generated asset handles")

	return cmd
}

func generateHandles(input, output string) error {
	stat, err := os.Stat(output)
	if err == nil && stat.IsDir() {
		return os.ErrInvalid
	}
	if err := os.Remove(output); err != nil && !os.IsNotExist(err) {
		return err
	}

	err = filepath.Walk(input, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if info.IsDir() {
			return nil
		}

		ext := filepath.Ext(path)
		if len(ext) > 0 {
			ext = ext[1:]
		}

		if !assets.CanImport(ext) {
			return nil
		}

		relPath, err := filepath.Rel(input, path)
		if err != nil {
			return err
		}
		relPath = filepath.ToSlash(relPath)

		name := toPascalCase(strings.TrimSuffix(info.Name(), "."+ext))
		paths[name] = relPath

		return nil
	})
	if err != nil {
		return err
	}

	f, err := os.Create(output)
	if err != nil {
		return err
	}
	defer f.Close()

	tmpl, err := template.New("handles").Parse(handlesGoTemplate)
	if err != nil {
		return err
	}

	err = tmpl.Execute(f, struct {
		Paths map[string]string
	}{
		Paths: paths,
	})
	if err != nil {
		return err
	}

	cmd := exec.Command("gofmt", "-w", output)
	if err := cmd.Run(); err != nil {
		return err
	}

	return nil
}

// toPascalCase converts a string to PascalCase
func toPascalCase(s string) string {
	// Split on common delimiters and convert each part
	words := strings.FieldsFunc(s, func(r rune) bool {
		return r == '-' || r == '_' || r == ' ' || r == '.'
	})

	var result strings.Builder
	for _, word := range words {
		if len(word) > 0 {
			// Capitalize first letter, lowercase the rest
			result.WriteString(strings.ToUpper(string(word[0])))
			if len(word) > 1 {
				result.WriteString(strings.ToLower(word[1:]))
			}
		}
	}
	return result.String()
}
